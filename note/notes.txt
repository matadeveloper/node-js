https://nodejs.dev/learn/how-much-javascript-do-you-need-to-know-to-use-nodejs
https://javascript.info/async-await
First , Run npm init to create new project node-js

Xendit dashboard for reference react & nodejs

#installing express
express is framewor for nodejs
npm i express --save

#Installing cors
CORS is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options.
https://expressjs.com/en/resources/middleware/cors.html
npm i cors --save

#installing nodemon
Nodemon restarts the server automatically when you save a file thatâ€™s used by the server.js. We can install Nodemon with the following command:
We can make things simpler by adding  script key in the package.json file. This lets us run nodemon server.js
"scripts": {
    "dev": "nodemon server.js"
  }

npm i nodemon --save
to run : npm run dev , and for resresh used : rs+enter

#installing body-parser
Body-parser is a middleware. They help to tidy up the request object before we use them. Express lets us use middleware with the use method
https://www.npmjs.com/package/body-parsernpm install log4js --save
npm install body-parser --save

#installing eslint
ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. In many ways, it is similar to JSLint and JSHint with a few exceptions:
https://www.npmjs.com/package/eslint#filing-issues

npm i eslint --save-dev
You should then set up a configuration file:
npm init @eslint/config
After that, you can run ESLint on any file or directory like this:
./node_modules/.bin/eslint yourfile.js

#Installing dotenv
Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env. Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology
https://www.npmjs.com/package/dotenv
npm i dotenv --save

#Installing Morgan (Middleware)
Create a new morgan logger middleware function using the given format and options. The format argument may be a string of a predefined name (see below for the names), a string of a format string, or a function that will produce a log entry.
https://www.npmjs.com/package/morgan
npm i morga --save

#Installing jsonwebtoken
https://www.npmjs.com/package/jsonwebtoken
npm i jsonwebtoken --save

#Installing Module-alias
Create aliases of directories and register custom module paths in NodeJS like a boss!
https://www.npmjs.com/package/module-alias
npm i --save module-alias

#Installing EJS
engine html in nodejs
npm i ejs --save

#Installing Babel
babel-node is a CLI that works exactly the same as the Node.js CLI, with the added benefit of compiling with Babel presets and plugins before running it.
https://babeljs.io/docs/en/babel-node
npm install --save-dev @babel/core @babel/node


#Installing Squelize & mysql2
MVC Database with builder
https://sequelize.org/docs/v6/getting-started/
https://www.npmjs.com/package/mysql2
npm install --save sequelize
npm install --save mysql2


#Installing multer
Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of busboy for maximum efficiency.
NOTE: Multer will not process any form which is not multipart (multipart/form-data).
Installation
$ npm install --save multer


#Installation node-datetime
An extended Date object for javascript.
- Handles offests by days and hours.
- Built-in formatting function. 
- Time based value calculation.
https://www.npmjs.com/package/node-datetime
Installing
npm i node-datetime --save


#Installing Graphql
Create a GraphQL HTTP server with any HTTP web framework that supports connect styled middleware, including Connect itself, Express and Restify.
npm install --save express-graphql
https://devsaurus.com/graphql
https://graphql.org/graphql-js/running-an-express-graphql-server/
npm install express-graphql graphql --save

#Installation set-tz
Setting time-zone 3rd for node-js
npm i set-tz @types/set-tz

#Installation axios
Axios is a promise-based HTTP Client for node.js and the browser. 
It is isomorphic (= it can run in the browser and nodejs with the same codebase). 
On the server-side it uses the native node.js http module, while on the client (browser) it uses XMLHttpRequests.
https://axios-http.com/docs/intro
Installing
npm install axios -- save


#Installation sharp
The typical use case for this high speed Node.js module is to convert large images in common formats to smaller, web-friendly JPEG, PNG, WebP, GIF and AVIF images of varying dimensions
https://www.npmjs.com/package/sharp
install
npm install sharp --save


#Installation uuid
For the creation of RFC4122 UUIDs
https://www.npmjs.com/package/uuid
install
npm install uuid --save

#Installation moment
It is not our differences that divide us. It is our inability to recognize, accept, and celebrate those differences
Moment Use To Create Date & Showing Date
Ref : https://momentjs.com/
install
npm install moment --save

#Installation babel
babel-node is a CLI that works exactly the same as the Node.js CLI, with the added benefit of compiling with Babel presets and plugins before running it.
https://babeljs.io/docs/en/babel-node
installing
npm install --save-dev @babel/core @babel/node

#Installation log4js & winston
This is a conversion of the log4js framework to work with node. I started out just stripping out the browser-specific code and tidying up some of the javascript to work better in node
https://developer.ibm.com/tutorials/learn-nodejs-winston/
https://www.npmjs.com/package/log4js
install
npm install log4js --save

#Installation bcrypt
You can read about bcrypt in Wikipedia as well as in the following article: How To Safely Store A Password
https://www.npmjs.com/package/bcrypt
install
npm install bcrypt --save